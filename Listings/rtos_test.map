Component: ARM Compiler 5.06 update 6 (build 750) Tool: armlink [4d35ed]

==============================================================================

Section Cross References

    main.o(i.main) refers to system_mkl25z4.o(i.SystemCoreClockUpdate) for SystemCoreClockUpdate
    main.o(i.main) refers to brain.o(i.initBrain) for initBrain
    main.o(i.main) refers to led_control.o(i.initLED) for initLED
    main.o(i.main) refers to uart_control.o(i.initUART2) for initUART2
    main.o(i.main) refers to motor_control.o(i.initMotor) for initMotor
    main.o(i.main) refers to motor_control.o(i.setMotion) for setMotion
    main.o(i.main) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    main.o(i.main) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(i.main) refers to rtx_kernel.o(.text.osKernelStart) for osKernelStart
    main.o(i.main) refers to brain.o(i.brain_thread) for brain_thread
    main.o(i.main) refers to led_control.o(i.led_control_thread) for led_control_thread
    uart_control.o(i.UART2_IRQHandler) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for osSemaphoreRelease
    uart_control.o(i.UART2_IRQHandler) refers to uart_control.o(.data) for remote_command
    uart_control.o(i.UART2_IRQHandler) refers to brain.o(.data) for brain_sem
    uart_control.o(i.initUART2) refers to aeabi_sdiv.o(.text) for __aeabi_uidivmod
    uart_control.o(i.initUART2) refers to uart_control.o(i.__NVIC_SetPriority) for __NVIC_SetPriority
    led_control.o(i.initLED) refers to led_control.o(i.led_control) for led_control
    led_control.o(i.initLED) refers to rtx_semaphore.o(.text.osSemaphoreNew) for osSemaphoreNew
    led_control.o(i.initLED) refers to led_control.o(.data) for LED_sem
    led_control.o(i.led_control) refers to led_control.o(i.led_r) for led_r
    led_control.o(i.led_control) refers to led_control.o(i.led_g) for led_g
    led_control.o(i.led_control) refers to led_control.o(i.led_b) for led_b
    led_control.o(i.led_control_thread) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for osSemaphoreAcquire
    led_control.o(i.led_control_thread) refers to led_control.o(i.led_r) for led_r
    led_control.o(i.led_control_thread) refers to led_control.o(i.led_g) for led_g
    led_control.o(i.led_control_thread) refers to led_control.o(i.led_b) for led_b
    led_control.o(i.led_control_thread) refers to led_control.o(.data) for LED_sem
    led_control.o(i.led_control_thread) refers to uart_control.o(.data) for remote_command
    audio_control.o(i.initPWM) refers to aeabi_sdiv.o(.text) for __aeabi_idivmod
    audio_control.o(i.initPWM) refers to audio_control.o(.data) for TPM1_frequency
    audio_control.o(i.setDutyCycle) refers to aeabi_sdiv.o(.text) for __aeabi_idivmod
    audio_control.o(i.setDutyCycle) refers to audio_control.o(.data) for TPM1_dutyCycle
    audio_control.o(i.setFrequency) refers to aeabi_sdiv.o(.text) for __aeabi_idivmod
    audio_control.o(i.setFrequency) refers to audio_control.o(.data) for TPM1_frequency
    motor_control.o(i.initMotor) refers to aeabi_sdiv.o(.text) for __aeabi_idivmod
    motor_control.o(i.initMotor) refers to motor_control.o(.data) for TPM0_frequency
    motor_control.o(i.setMotion) refers to motor_control.o(i.enableMotor) for enableMotor
    brain.o(i.brain_thread) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for osSemaphoreAcquire
    brain.o(i.brain_thread) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for osSemaphoreRelease
    brain.o(i.brain_thread) refers to brain.o(.data) for brain_sem
    brain.o(i.brain_thread) refers to uart_control.o(.data) for remote_command
    brain.o(i.brain_thread) refers to led_control.o(.data) for LED_sem
    brain.o(i.initBrain) refers to rtx_semaphore.o(.text.osSemaphoreNew) for osSemaphoreNew
    brain.o(i.initBrain) refers to brain.o(.data) for brain_sem
    rtx_lib.o(i.__user_perthread_libspace) refers to rtx_lib.o(i.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(i.__user_perthread_libspace) refers to rtx_thread.o(.text.osThreadGetId) for osThreadGetId
    rtx_lib.o(i.__user_perthread_libspace) refers to rtx_config.o(i.osRtxErrorNotify) for osRtxErrorNotify
    rtx_lib.o(i.__user_perthread_libspace) refers to rtx_lib.o(.bss.os.libspace) for os_libspace_id
    rtx_lib.o(i._mutex_acquire) refers to rtx_lib.o(i.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(i._mutex_acquire) refers to rtx_mutex.o(.text.osMutexAcquire) for osMutexAcquire
    rtx_lib.o(i._mutex_free) refers to rtx_mutex.o(.text.osMutexDelete) for osMutexDelete
    rtx_lib.o(i._mutex_initialize) refers to rtx_mutex.o(.text.osMutexNew) for osMutexNew
    rtx_lib.o(i._mutex_initialize) refers to rtx_config.o(i.osRtxErrorNotify) for osRtxErrorNotify
    rtx_lib.o(i._mutex_release) refers to rtx_lib.o(i.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(i._mutex_release) refers to rtx_mutex.o(.text.osMutexRelease) for osMutexRelease
    rtx_lib.o(i._platform_post_stackheap_init) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    rtx_lib.o(i.os_kernel_is_active) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    rtx_lib.o(i.os_kernel_is_active) refers to rtx_lib.o(.data) for os_kernel_active
    rtx_lib.o(.constdata) refers to rtx_lib.o(.bss.os.thread.cb) for os_idle_thread_cb
    rtx_lib.o(.constdata) refers to rtx_lib.o(.bss.os.thread.stack) for os_idle_thread_stack
    rtx_lib.o(.constdata) refers to rtx_lib.o(.bss.os.msgqueue.cb) for os_timer_mq_cb
    rtx_lib.o(.constdata) refers to rtx_lib.o(.bss.os.msgqueue.mem) for os_timer_mq_data
    rtx_lib.o(.data) refers to irq_cm0.o(.constdata) for irqRtxLib
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for os_isr_queue
    rtx_lib.o(.rodata) refers to rtx_lib.o(.constdata) for os_idle_thread_attr
    rtx_config.o(i.osRtxErrorNotify) refers to rtx_config.o(i.__ARM_common_switch8) for __ARM_common_switch8
    startup_mkl25z4.o(STACK) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_mkl25z4.o(HEAP) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_mkl25z4.o(RESET) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(STACK) for __initial_sp
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(.text) for Reset_Handler
    startup_mkl25z4.o(RESET) refers to irq_cm0.o(.text) for SVC_Handler
    startup_mkl25z4.o(RESET) refers to uart_control.o(i.UART2_IRQHandler) for UART2_IRQHandler
    startup_mkl25z4.o(.ARM.__at_0x400) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_mkl25z4.o(.text) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_mkl25z4.o(.text) refers to system_mkl25z4.o(i.SystemInit) for SystemInit
    startup_mkl25z4.o(.text) refers to __main.o(!!!main) for __main
    startup_mkl25z4.o(.text) refers to startup_mkl25z4.o(HEAP) for Heap_Mem
    startup_mkl25z4.o(.text) refers to startup_mkl25z4.o(STACK) for Stack_Mem
    system_mkl25z4.o(i.SystemCoreClockUpdate) refers to aeabi_sdiv.o(.text) for __aeabi_uidivmod
    system_mkl25z4.o(i.SystemCoreClockUpdate) refers to rtx_config.o(i.__ARM_common_switch8) for __ARM_common_switch8
    system_mkl25z4.o(i.SystemCoreClockUpdate) refers to system_mkl25z4.o(.data) for SystemCoreClock
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rt_memclr.o(.text) for __aeabi_memclr4
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_cm0.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_config.o(i.osRtxErrorNotify) for osRtxErrorNotify
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(i.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rt_memclr.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rt_memclr.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for svcRtxSemaphoreNew
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.osSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for svcRtxSemaphoreGetName
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.osSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for svcRtxSemaphoreAcquire
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for svcRtxSemaphoreRelease
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for svcRtxSemaphoreGetCount
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.osSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for svcRtxSemaphoreDelete
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.osSemaphoreDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for osRtxSemaphorePostProcess
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for [Anonymous Symbol]
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_cm0.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_cm0.o(.text) refers to rtx_lib.o(.constdata) for osRtxUserSVC
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for osMessageQueueNew
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_config.o(i.osRtxErrorNotify) for osRtxErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_config.o(i.osRtxErrorNotify) for osRtxErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to aeabi_sdiv.o(.text) for __aeabi_uidiv
    os_systick.o(.text.OS_Tick_Setup) refers to system_mkl25z4.o(.data) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_mkl25z4.o(.data) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rt_memcpy.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    rt_memcpy.o(.text) refers to rt_memcpy.o(.emb_text) for __aeabi_memcpy4
    __main.o(!!!main) refers to __rtentry.o(.ARM.Collect$$rtentry$$00000000) for __rt_entry
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for __rt_entry_li
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for __rt_entry_main
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000C) for __rt_entry_postli_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for __rt_entry_postsh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000002) for __rt_entry_presh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for __rt_entry_sh
    aeabi_idiv0_sigfpe.o(.text) refers to rt_div0.o(.text) for __rt_div0
    __rtentry2.o(.ARM.Collect$$rtentry$$00000008) refers to rtx_lib.o(i._platform_post_stackheap_init) for _platform_post_stackheap_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) refers to libinit.o(.ARM.Collect$$libinit$$00000000) for __rt_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) refers to boardinit3.o(.text) for _platform_post_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to main.o(i.main) for main
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to exit.o(.text) for exit
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000001) for .ARM.Collect$$rtentry$$00000001
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for .ARM.Collect$$rtentry$$00000008
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for .ARM.Collect$$rtentry$$0000000A
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) for .ARM.Collect$$rtentry$$0000000B
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for .ARM.Collect$$rtentry$$0000000D
    __rtentry4.o(.ARM.Collect$$rtentry$$00000004) refers to sys_stackheap_outer.o(.text) for __user_setup_stackheap
    __rtentry4.o(.ARM.exidx) refers to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for .ARM.Collect$$rtentry$$00000004
    rt_div0.o(.text) refers to defsig_fpe_outer.o(.text) for __rt_SIGFPE
    sys_stackheap_outer.o(.text) refers to libspace.o(.text) for __user_perproc_libspace
    sys_stackheap_outer.o(.text) refers to startup_mkl25z4.o(.text) for __user_initial_stackheap
    sys_stackheap_outer.o(__vectab_stack_and_reset_area) refers to tempstk.o(.text) for __temporary_stack_top
    sys_stackheap_outer.o(__vectab_stack_and_reset_area) refers to __main.o(!!!main) for __main
    exit.o(.text) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for __rt_exit
    defsig_fpe_outer.o(.text) refers to defsig_fpe_inner.o(.text) for __rt_SIGFPE_inner
    defsig_fpe_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_fpe_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002E) for __rt_lib_init_alloca_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002C) for __rt_lib_init_argv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001B) for __rt_lib_init_atexit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000021) for __rt_lib_init_clock_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000032) for __rt_lib_init_cpp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000030) for __rt_lib_init_exceptions_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000002) for __rt_lib_init_fp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001F) for __rt_lib_init_fp_trap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000023) for __rt_lib_init_getenv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000A) for __rt_lib_init_heap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000011) for __rt_lib_init_lc_collate_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000013) for __rt_lib_init_lc_ctype_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000015) for __rt_lib_init_lc_monetary_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000017) for __rt_lib_init_lc_numeric_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000019) for __rt_lib_init_lc_time_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000004) for __rt_lib_init_preinit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000E) for __rt_lib_init_rand_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000033) for __rt_lib_init_return
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001D) for __rt_lib_init_signal_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000025) for __rt_lib_init_stdio_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000C) for __rt_lib_init_user_alloc_1
    libspace.o(.text) refers to libspace.o(.bss) for __libspace_start
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for .ARM.Collect$$rtexit$$00000000
    rt_raise.o(.text) refers to __raise.o(.text) for __raise
    rt_raise.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_exit.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_fpe_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    libinit2.o(.ARM.Collect$$libinit$$00000010) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000012) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000014) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000016) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000018) refers to libinit2.o(.ARM.Collect$$libinit$$0000000F) for .ARM.Collect$$libinit$$0000000F
    libinit2.o(.ARM.Collect$$libinit$$00000026) refers to argv_veneer.o(.text) for __ARM_argv_veneer
    libinit2.o(.ARM.Collect$$libinit$$00000027) refers to argv_veneer.o(.text) for __ARM_argv_veneer
    sys_exit.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    rtexit2.o(.ARM.Collect$$rtexit$$00000003) refers to libshutdown.o(.ARM.Collect$$libshutdown$$00000000) for __rt_lib_shutdown
    rtexit2.o(.ARM.Collect$$rtexit$$00000004) refers to sys_exit.o(.text) for _sys_exit
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000001) for .ARM.Collect$$rtexit$$00000001
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for .ARM.Collect$$rtexit$$00000003
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for .ARM.Collect$$rtexit$$00000004
    __raise.o(.text) refers to defsig.o(CL$$defsig) for __default_signal_handler
    defsig_general.o(.text) refers to sys_wrch.o(.text) for _ttywrch
    sys_wrch.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig.o(CL$$defsig) refers to defsig_fpe_inner.o(.text) for __rt_SIGFPE_inner
    defsig.o(CL$$defsig) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    _get_argv_nomalloc.o(.text) refers (Special) to hrguard.o(.text) for __heap_region$guard
    _get_argv_nomalloc.o(.text) refers to defsig_rtmem_outer.o(.text) for __rt_SIGRTMEM
    _get_argv_nomalloc.o(.text) refers to sys_command.o(.text) for _sys_command_string
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000002) for __rt_lib_shutdown_cpp_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000007) for __rt_lib_shutdown_fp_trap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F) for __rt_lib_shutdown_heap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000010) for __rt_lib_shutdown_return
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A) for __rt_lib_shutdown_signal_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000004) for __rt_lib_shutdown_stdio_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C) for __rt_lib_shutdown_user_alloc_1
    sys_command.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig_abrt_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtred_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtmem_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtmem_outer.o(.text) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_rtmem_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_rtmem_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    defsig_stak_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_pvfn_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_cppl_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_segv_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_other.o(.text) refers to defsig_general.o(.text) for __default_signal_display


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.rev16_text), (4 bytes).
    Removing main.o(.revsh_text), (4 bytes).
    Removing uart_control.o(.rev16_text), (4 bytes).
    Removing uart_control.o(.revsh_text), (4 bytes).
    Removing led_control.o(.rev16_text), (4 bytes).
    Removing led_control.o(.revsh_text), (4 bytes).
    Removing audio_control.o(.rev16_text), (4 bytes).
    Removing audio_control.o(.revsh_text), (4 bytes).
    Removing audio_control.o(i.initPWM), (208 bytes).
    Removing audio_control.o(i.setDutyCycle), (64 bytes).
    Removing audio_control.o(i.setFrequency), (64 bytes).
    Removing audio_control.o(.data), (2 bytes).
    Removing motor_control.o(.rev16_text), (4 bytes).
    Removing motor_control.o(.revsh_text), (4 bytes).
    Removing motor_control.o(i.disableMotor), (28 bytes).
    Removing brain.o(.rev16_text), (4 bytes).
    Removing brain.o(.revsh_text), (4 bytes).
    Removing rtx_lib.o(.rev16_text), (4 bytes).
    Removing rtx_lib.o(.revsh_text), (4 bytes).
    Removing rtx_lib.o(i.__user_perthread_libspace), (88 bytes).
    Removing rtx_lib.o(.bss.os.libspace), (496 bytes).
    Removing rtx_config.o(.rev16_text), (4 bytes).
    Removing rtx_config.o(.revsh_text), (4 bytes).
    Removing system_mkl25z4.o(.rev16_text), (4 bytes).
    Removing system_mkl25z4.o(.revsh_text), (4 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (56 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (84 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (136 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSetPriority), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadYield), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (68 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSetPriority), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (28 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadYield), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (54 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (58 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (188 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (96 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (108 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (18 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (24 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing rtx_semaphore.o(.text), (0 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetName), (36 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetCount), (48 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetCount), (18 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreDelete), (40 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetName), (18 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreDelete), (96 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete), (8 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (132 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (18 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (42 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (56 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (22 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (444 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (64 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (112 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (40 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (22 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (162 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (112 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).

349 unused section(s) (total 8474 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    RESET                                    0x00000000   Section      192  startup_mkl25z4.o(RESET)
    ../clib/../cmprslib/zerorunl.c           0x00000000   Number         0  __dczerorl.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit1.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit3.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardshut.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_zi.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry4.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit2.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry2.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_raise.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_div0.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  aeabi_idiv0_sigfpe.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  aeabi_idiv0.o ABSOLUTE
    ../clib/angel/scatterp.s                 0x00000000   Number         0  __scatter.o ABSOLUTE
    ../clib/angel/startup.s                  0x00000000   Number         0  __main.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  indicate_semi.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  use_no_semi.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  sys_stackheap_outer.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  libspace.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  tempstk.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  _get_argv_nomalloc.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  no_argv.o ABSOLUTE
    ../clib/division.s                       0x00000000   Number         0  aeabi_sdiv.o ABSOLUTE
    ../clib/division.s                       0x00000000   Number         0  aeabi_sdiv_div0.o ABSOLUTE
    ../clib/heapalloc.c                      0x00000000   Number         0  hrguard.o ABSOLUTE
    ../clib/heapaux.c                        0x00000000   Number         0  heapauxi.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown2.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit2.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit.o ABSOLUTE
    ../clib/memcpset.c                       0x00000000   Number         0  rt_memcpy.o ABSOLUTE
    ../clib/memcpset.c                       0x00000000   Number         0  rt_memcpy.o ABSOLUTE
    ../clib/memcpset.c                       0x00000000   Number         0  rt_memclr.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_pvfn_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  __raise.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_other.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_segv_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_cppl_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_stak_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtred_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_abrt_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_exit.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_general.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_inner.o ABSOLUTE
    ../clib/signal.s                         0x00000000   Number         0  defsig.o ABSOLUTE
    ../clib/stdlib.c                         0x00000000   Number         0  exit.o ABSOLUTE
    ../fplib/cfplib/fpinit.c                 0x00000000   Number         0  fpinit.o ABSOLUTE
    ..\..\..\Source\ARM\irq_cm0.s            0x00000000   Number         0  irq_cm0.o ABSOLUTE
    C:\Users\yuejunfeng\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\RTOS2\RTX\Source\rtx_lib.c 0x00000000   Number         0  rtx_lib.o ABSOLUTE
    C:\\Users\\yuejunfeng\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.6.0\\CMSIS\\RTOS2\\RTX\\Source\\rtx_lib.c 0x00000000   Number         0  rtx_lib.o ABSOLUTE
    RTE\CMSIS\RTX_Config.c                   0x00000000   Number         0  rtx_config.o ABSOLUTE
    RTE\Device\MKL25Z128xxx4\startup_MKL25Z4.s 0x00000000   Number         0  startup_mkl25z4.o ABSOLUTE
    RTE\Device\MKL25Z128xxx4\system_MKL25Z4.c 0x00000000   Number         0  system_mkl25z4.o ABSOLUTE
    RTE\\CMSIS\\RTX_Config.c                 0x00000000   Number         0  rtx_config.o ABSOLUTE
    RTE\\Device\\MKL25Z128xxx4\\system_MKL25Z4.c 0x00000000   Number         0  system_mkl25z4.o ABSOLUTE
    UART_control.c                           0x00000000   Number         0  uart_control.o ABSOLUTE
    UART_control.c                           0x00000000   Number         0  uart_control.o ABSOLUTE
    audio_control.c                          0x00000000   Number         0  audio_control.o ABSOLUTE
    audio_control.c                          0x00000000   Number         0  audio_control.o ABSOLUTE
    brain.c                                  0x00000000   Number         0  brain.o ABSOLUTE
    brain.c                                  0x00000000   Number         0  brain.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    led_control.c                            0x00000000   Number         0  led_control.o ABSOLUTE
    led_control.c                            0x00000000   Number         0  led_control.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    motor_control.c                          0x00000000   Number         0  motor_control.o ABSOLUTE
    motor_control.c                          0x00000000   Number         0  motor_control.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_semaphore.c                          0x00000000   Number         0  rtx_semaphore.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    !!!main                                  0x000000c0   Section        8  __main.o(!!!main)
    !!!scatter                               0x000000c8   Section       60  __scatter.o(!!!scatter)
    !!handler_zi                             0x00000104   Section       28  __scatter_zi.o(!!handler_zi)
    .ARM.Collect$$libinit$$00000000          0x00000120   Section        2  libinit.o(.ARM.Collect$$libinit$$00000000)
    .ARM.Collect$$libinit$$00000002          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000002)
    .ARM.Collect$$libinit$$00000004          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    .ARM.Collect$$libinit$$0000000A          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000A)
    .ARM.Collect$$libinit$$0000000C          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    .ARM.Collect$$libinit$$0000000E          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    .ARM.Collect$$libinit$$00000011          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000011)
    .ARM.Collect$$libinit$$00000013          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    .ARM.Collect$$libinit$$00000015          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    .ARM.Collect$$libinit$$00000017          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    .ARM.Collect$$libinit$$00000019          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    .ARM.Collect$$libinit$$0000001B          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    .ARM.Collect$$libinit$$0000001D          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    .ARM.Collect$$libinit$$0000001F          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    .ARM.Collect$$libinit$$00000021          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    .ARM.Collect$$libinit$$00000023          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    .ARM.Collect$$libinit$$00000025          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    .ARM.Collect$$libinit$$0000002C          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002C)
    .ARM.Collect$$libinit$$0000002E          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    .ARM.Collect$$libinit$$00000030          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    .ARM.Collect$$libinit$$00000032          0x00000122   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    .ARM.Collect$$libinit$$00000033          0x00000122   Section        2  libinit2.o(.ARM.Collect$$libinit$$00000033)
    .ARM.Collect$$libshutdown$$00000000      0x00000124   Section        2  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    .ARM.Collect$$libshutdown$$00000002      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    .ARM.Collect$$libshutdown$$00000004      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    .ARM.Collect$$libshutdown$$00000007      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    .ARM.Collect$$libshutdown$$0000000A      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    .ARM.Collect$$libshutdown$$0000000C      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    .ARM.Collect$$libshutdown$$0000000F      0x00000126   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    .ARM.Collect$$libshutdown$$00000010      0x00000126   Section        2  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    .ARM.Collect$$rtentry$$00000000          0x00000128   Section        0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    .ARM.Collect$$rtentry$$00000002          0x00000128   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    .ARM.Collect$$rtentry$$00000004          0x00000128   Section        6  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    .ARM.Collect$$rtentry$$00000008          0x0000012e   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    .ARM.Collect$$rtentry$$0000000A          0x00000136   Section        4  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    .ARM.Collect$$rtentry$$0000000C          0x0000013a   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    .ARM.Collect$$rtentry$$0000000D          0x0000013a   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    .ARM.Collect$$rtexit$$00000000           0x00000142   Section        2  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    .ARM.Collect$$rtexit$$00000002           0x00000144   Section        0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    .ARM.Collect$$rtexit$$00000003           0x00000144   Section        4  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    .ARM.Collect$$rtexit$$00000004           0x00000148   Section        6  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    .emb_text                                0x00000150   Section       56  rt_memcpy.o(.emb_text)
    .text                                    0x00000188   Section       64  startup_mkl25z4.o(.text)
    .text                                    0x000001c8   Section      164  irq_cm0.o(.text)
    .text                                    0x0000026c   Section        0  rt_memcpy.o(.text)
    .text                                    0x000002ee   Section        0  rt_memclr.o(.text)
    .text                                    0x0000032e   Section        0  heapauxi.o(.text)
    .text                                    0x00000334   Section       62  sys_stackheap_outer.o(.text)
    .text                                    0x00000372   Section        0  exit.o(.text)
    .text                                    0x00000384   Section        8  libspace.o(.text)
    .text                                    0x0000038c   Section        0  sys_exit.o(.text)
    .text                                    0x00000398   Section        2  use_no_semi.o(.text)
    .text                                    0x0000039a   Section        0  indicate_semi.o(.text)
    .text                                    0x0000039a   Section        0  __dczerorl.o(.text)
    [Anonymous Symbol]                       0x000003d4   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    MessageQueueRemove                       0x000003d5   Thumb Code    30  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000003f4   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    __arm_cp.3_0                             0x000003fc   Number         4  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    .ARM.__at_0x400                          0x00000400   Section       16  startup_mkl25z4.o(.ARM.__at_0x400)
    .text                                    0x00000410   Section      346  aeabi_sdiv.o(.text)
    [Anonymous Symbol]                       0x0000056a   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueueGet                          0x0000056b   Thumb Code    76  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x000005b6   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    MessageQueuePut                          0x000005b7   Thumb Code    98  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x00000618   Section        0  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_0                             0x00000638   Number         4  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_1                             0x0000063c   Number         4  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_2                             0x00000640   Number         4  os_systick.o(.text.OS_Tick_Enable)
    [Anonymous Symbol]                       0x00000644   Section        0  os_systick.o(.text.OS_Tick_GetIRQn)
    [Anonymous Symbol]                       0x0000064c   Section        0  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_0                             0x00000688   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_1                             0x0000068c   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_2                             0x00000690   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_3                             0x00000694   Number         4  os_systick.o(.text.OS_Tick_Setup)
    [Anonymous Symbol]                       0x00000698   Section        0  rtx_semaphore.o(.text.SemaphoreTokenDecrement)
    SemaphoreTokenDecrement                  0x00000699   Thumb Code    36  rtx_semaphore.o(.text.SemaphoreTokenDecrement)
    [Anonymous Symbol]                       0x000006bc   Section        0  rtx_semaphore.o(.text.SemaphoreTokenIncrement)
    SemaphoreTokenIncrement                  0x000006bd   Thumb Code    38  rtx_semaphore.o(.text.SemaphoreTokenIncrement)
    [Anonymous Symbol]                       0x000006e2   Section        0  rtx_thread.o(.text.ThreadFlagsCheck)
    ThreadFlagsCheck                         0x000006e3   Thumb Code    78  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x00000730   Section        0  rtx_timer.o(.text.TimerInsert)
    TimerInsert                              0x00000731   Thumb Code    76  rtx_timer.o(.text.TimerInsert)
    __arm_cp.8_0                             0x00000778   Number         4  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x0000077c   Section        0  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.4_0                             0x000007a4   Number         4  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.4_1                             0x000007a8   Number         4  rtx_kernel.o(.text.osKernelGetState)
    [Anonymous Symbol]                       0x000007ac   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.1_0                             0x000007d0   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x000007d4   Section        0  rtx_kernel.o(.text.osKernelStart)
    __arm_cp.6_0                             0x000007f4   Number         4  rtx_kernel.o(.text.osKernelStart)
    [Anonymous Symbol]                       0x000007f8   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.3_0                             0x00000868   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x0000086c   Section        0  rtx_msgqueue.o(.text.osMessageQueueNew)
    __arm_cp.0_0                             0x0000088c   Number         4  rtx_msgqueue.o(.text.osMessageQueueNew)
    [Anonymous Symbol]                       0x00000890   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.2_0                             0x00000904   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x00000908   Section        0  rtx_mutex.o(.text.osMutexAcquire)
    __arm_cp.3_0                             0x0000092c   Number         4  rtx_mutex.o(.text.osMutexAcquire)
    [Anonymous Symbol]                       0x00000930   Section        0  rtx_mutex.o(.text.osMutexDelete)
    __arm_cp.6_0                             0x00000954   Number         4  rtx_mutex.o(.text.osMutexDelete)
    [Anonymous Symbol]                       0x00000958   Section        0  rtx_mutex.o(.text.osMutexNew)
    __arm_cp.1_0                             0x00000978   Number         4  rtx_mutex.o(.text.osMutexNew)
    [Anonymous Symbol]                       0x0000097c   Section        0  rtx_mutex.o(.text.osMutexRelease)
    __arm_cp.4_0                             0x000009a0   Number         4  rtx_mutex.o(.text.osMutexRelease)
    [Anonymous Symbol]                       0x000009a4   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    [Anonymous Symbol]                       0x000009a6   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x00000a22   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x00000a70   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x00000aa2   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x00000ad0   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x00000b0a   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    [Anonymous Symbol]                       0x00000b48   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    osRtxMessageQueuePostProcess             0x00000b49   Thumb Code   188  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00000c04   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    [Anonymous Symbol]                       0x00000c48   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    __arm_cp.1_0                             0x00000cc4   Number         4  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x00000cc8   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_0                             0x00000d2c   Number         4  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x00000d30   Number         4  rtx_system.o(.text.osRtxPostProcess)
    [Anonymous Symbol]                       0x00000d34   Section        0  rtx_semaphore.o(.text.osRtxSemaphorePostProcess)
    osRtxSemaphorePostProcess                0x00000d35   Thumb Code    36  rtx_semaphore.o(.text.osRtxSemaphorePostProcess)
    [Anonymous Symbol]                       0x00000d58   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadBlock                         0x00000d59   Thumb Code    56  rtx_thread.o(.text.osRtxThreadBlock)
    __arm_cp.10_0                            0x00000d8c   Number         4  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x00000d90   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayInsert                   0x00000d91   Thumb Code   128  rtx_thread.o(.text.osRtxThreadDelayInsert)
    __arm_cp.14_0                            0x00000e0c   Number         4  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x00000e10   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    osRtxThreadDelayRemove                   0x00000e11   Thumb Code    68  rtx_thread.o(.text.osRtxThreadDelayRemove)
    __arm_cp.12_0                            0x00000e50   Number         4  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00000e54   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    __arm_cp.5_0                             0x00000e88   Number         4  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x00000e8c   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    __arm_cp.9_0                             0x00000ed8   Number         4  rtx_thread.o(.text.osRtxThreadDispatch)
    [Anonymous Symbol]                       0x00000edc   Section        0  rtx_thread.o(.text.osRtxThreadFree)
    osRtxThreadFree                          0x00000edd   Thumb Code    84  rtx_thread.o(.text.osRtxThreadFree)
    __arm_cp.52_0                            0x00000f2c   Number         4  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00000f30   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x00000f44   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x00000f70   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    [Anonymous Symbol]                       0x00000f88   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    [Anonymous Symbol]                       0x00000fae   Section        0  rtx_thread.o(.text.osRtxThreadPostProcess)
    osRtxThreadPostProcess                   0x00000faf   Thumb Code    38  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x00000fd4   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    __arm_cp.4_0                             0x00000fe8   Number         4  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x00000fec   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x00000ff4   Section        0  rtx_thread.o(.text.osRtxThreadStackCheck)
    __arm_cp.8_0                             0x00001018   Number         4  rtx_thread.o(.text.osRtxThreadStackCheck)
    __arm_cp.8_1                             0x0000101c   Number         4  rtx_thread.o(.text.osRtxThreadStackCheck)
    [Anonymous Symbol]                       0x00001020   Section        0  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_0                            0x00001050   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_1                            0x00001054   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_2                            0x00001058   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_3                            0x0000105c   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    [Anonymous Symbol]                       0x00001060   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    __arm_cp.7_0                             0x00001070   Number         4  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x00001074   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.13_0                            0x000010ac   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x000010b0   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x000010d4   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    __arm_cp.0_0                             0x00001144   Number         4  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x00001148   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_0                             0x00001178   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_1                             0x0000117c   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_2                             0x00001180   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    [Anonymous Symbol]                       0x00001184   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    osRtxTimerTick                           0x00001185   Thumb Code    96  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x000011e0   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x000011e4   Section        0  rtx_semaphore.o(.text.osSemaphoreAcquire)
    __arm_cp.2_0                             0x00001224   Number         4  rtx_semaphore.o(.text.osSemaphoreAcquire)
    [Anonymous Symbol]                       0x00001228   Section        0  rtx_semaphore.o(.text.osSemaphoreNew)
    __arm_cp.0_0                             0x00001248   Number         4  rtx_semaphore.o(.text.osSemaphoreNew)
    [Anonymous Symbol]                       0x0000124c   Section        0  rtx_semaphore.o(.text.osSemaphoreRelease)
    __arm_cp.3_0                             0x00001294   Number         4  rtx_semaphore.o(.text.osSemaphoreRelease)
    [Anonymous Symbol]                       0x00001298   Section        0  rtx_thread.o(.text.osThreadExit)
    __arm_cp.31_0                            0x000012a0   Number         4  rtx_thread.o(.text.osThreadExit)
    [Anonymous Symbol]                       0x000012a4   Section        0  rtx_thread.o(.text.osThreadNew)
    __arm_cp.17_0                            0x000012c4   Number         4  rtx_thread.o(.text.osThreadNew)
    [Anonymous Symbol]                       0x000012c8   Section        0  rtx_kernel.o(.text.svcRtxKernelGetState)
    svcRtxKernelGetState                     0x000012c9   Thumb Code    12  rtx_kernel.o(.text.svcRtxKernelGetState)
    __arm_cp.5_0                             0x000012d0   Number         4  rtx_kernel.o(.text.svcRtxKernelGetState)
    [Anonymous Symbol]                       0x000012d4   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxKernelInitialize                   0x000012d5   Thumb Code   328  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.20_0                            0x00001410   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.20_1                            0x00001414   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.20_2                            0x00001418   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x0000141c   Section        0  rtx_kernel.o(.text.svcRtxKernelStart)
    svcRtxKernelStart                        0x0000141d   Thumb Code   132  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_0                            0x00001490   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_1                            0x00001494   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_2                            0x00001498   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_3                            0x0000149c   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    [Anonymous Symbol]                       0x000014a0   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueGet                    0x000014a1   Thumb Code   232  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    __arm_cp.21_0                            0x00001584   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x00001588   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueueNew                    0x00001589   Thumb Code   484  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_0                            0x00001754   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_1                            0x00001758   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_2                            0x0000175c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_3                            0x00001760   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_4                            0x00001764   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_5                            0x00001768   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x0000176c   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxMessageQueuePut                    0x0000176d   Thumb Code   188  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    __arm_cp.19_0                            0x00001824   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x00001828   Section        0  rtx_mutex.o(.text.svcRtxMutexAcquire)
    svcRtxMutexAcquire                       0x00001829   Thumb Code   152  rtx_mutex.o(.text.svcRtxMutexAcquire)
    __arm_cp.9_0                             0x000018bc   Number         4  rtx_mutex.o(.text.svcRtxMutexAcquire)
    [Anonymous Symbol]                       0x000018c0   Section        0  rtx_mutex.o(.text.svcRtxMutexDelete)
    svcRtxMutexDelete                        0x000018c1   Thumb Code   188  rtx_mutex.o(.text.svcRtxMutexDelete)
    __arm_cp.12_0                            0x00001978   Number         4  rtx_mutex.o(.text.svcRtxMutexDelete)
    [Anonymous Symbol]                       0x0000197c   Section        0  rtx_mutex.o(.text.svcRtxMutexNew)
    svcRtxMutexNew                           0x0000197d   Thumb Code   112  rtx_mutex.o(.text.svcRtxMutexNew)
    __arm_cp.7_0                             0x000019e8   Number         4  rtx_mutex.o(.text.svcRtxMutexNew)
    [Anonymous Symbol]                       0x000019ec   Section        0  rtx_mutex.o(.text.svcRtxMutexRelease)
    svcRtxMutexRelease                       0x000019ed   Thumb Code   192  rtx_mutex.o(.text.svcRtxMutexRelease)
    __arm_cp.10_0                            0x00001aa8   Number         4  rtx_mutex.o(.text.svcRtxMutexRelease)
    [Anonymous Symbol]                       0x00001aac   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreAcquire)
    svcRtxSemaphoreAcquire                   0x00001aad   Thumb Code    76  rtx_semaphore.o(.text.svcRtxSemaphoreAcquire)
    __arm_cp.11_0                            0x00001af4   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreAcquire)
    [Anonymous Symbol]                       0x00001af8   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    svcRtxSemaphoreNew                       0x00001af9   Thumb Code   136  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_0                             0x00001b74   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_1                             0x00001b78   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_2                             0x00001b7c   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    [Anonymous Symbol]                       0x00001b80   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreRelease)
    svcRtxSemaphoreRelease                   0x00001b81   Thumb Code    56  rtx_semaphore.o(.text.svcRtxSemaphoreRelease)
    [Anonymous Symbol]                       0x00001bb8   Section        0  rtx_thread.o(.text.svcRtxThreadExit)
    svcRtxThreadExit                         0x00001bb9   Thumb Code   108  rtx_thread.o(.text.svcRtxThreadExit)
    __arm_cp.54_0                            0x00001c20   Number         4  rtx_thread.o(.text.svcRtxThreadExit)
    [Anonymous Symbol]                       0x00001c24   Section        0  rtx_thread.o(.text.svcRtxThreadNew)
    svcRtxThreadNew                          0x00001c25   Thumb Code   492  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_0                            0x00001df8   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_1                            0x00001dfc   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_2                            0x00001e00   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_3                            0x00001e04   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_4                            0x00001e08   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_5                            0x00001e0c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    i.SystemCoreClockUpdate                  0x00001e10   Section        0  system_mkl25z4.o(i.SystemCoreClockUpdate)
    i.SystemInit                             0x00001fa0   Section        0  system_mkl25z4.o(i.SystemInit)
    i.UART2_IRQHandler                       0x00001fac   Section        0  uart_control.o(i.UART2_IRQHandler)
    i.__ARM_common_switch8                   0x00001fd8   Section        0  rtx_config.o(i.__ARM_common_switch8)
    i.__NVIC_SetPriority                     0x00001ff4   Section        0  uart_control.o(i.__NVIC_SetPriority)
    __NVIC_SetPriority                       0x00001ff5   Thumb Code   110  uart_control.o(i.__NVIC_SetPriority)
    i._mutex_acquire                         0x0000206c   Section        0  rtx_lib.o(i._mutex_acquire)
    __tagsym$$used                           0x0000206d   Number         0  rtx_lib.o(i._mutex_acquire)
    i._mutex_free                            0x00002084   Section        0  rtx_lib.o(i._mutex_free)
    __tagsym$$used                           0x00002085   Number         0  rtx_lib.o(i._mutex_free)
    i._mutex_initialize                      0x00002090   Section        0  rtx_lib.o(i._mutex_initialize)
    __tagsym$$used                           0x00002091   Number         0  rtx_lib.o(i._mutex_initialize)
    i._mutex_release                         0x000020b4   Section        0  rtx_lib.o(i._mutex_release)
    __tagsym$$used                           0x000020b5   Number         0  rtx_lib.o(i._mutex_release)
    i._platform_post_stackheap_init          0x000020c8   Section        0  rtx_lib.o(i._platform_post_stackheap_init)
    i.brain_thread                           0x000020d0   Section        0  brain.o(i.brain_thread)
    i.enableMotor                            0x00002100   Section        0  motor_control.o(i.enableMotor)
    i.initBrain                              0x0000211c   Section        0  brain.o(i.initBrain)
    i.initLED                                0x00002134   Section        0  led_control.o(i.initLED)
    i.initMotor                              0x000021dc   Section        0  motor_control.o(i.initMotor)
    i.initUART2                              0x00002354   Section        0  uart_control.o(i.initUART2)
    i.led_b                                  0x00002420   Section        0  led_control.o(i.led_b)
    i.led_control                            0x00002444   Section        0  led_control.o(i.led_control)
    i.led_control_thread                     0x000024ac   Section        0  led_control.o(i.led_control_thread)
    i.led_g                                  0x00002504   Section        0  led_control.o(i.led_g)
    i.led_r                                  0x0000252c   Section        0  led_control.o(i.led_r)
    i.main                                   0x00002554   Section        0  main.o(i.main)
    i.osRtxErrorNotify                       0x00002594   Section        0  rtx_config.o(i.osRtxErrorNotify)
    i.osRtxIdleThread                        0x000025b4   Section        0  rtx_config.o(i.osRtxIdleThread)
    i.os_kernel_is_active                    0x000025b8   Section        0  rtx_lib.o(i.os_kernel_is_active)
    os_kernel_is_active                      0x000025b9   Thumb Code    30  rtx_lib.o(i.os_kernel_is_active)
    i.setMotion                              0x000025dc   Section        0  motor_control.o(i.setMotion)
    .constdata                               0x000025ec   Section      100  rtx_lib.o(.constdata)
    os_idle_thread_attr                      0x000025ec   Data          36  rtx_lib.o(.constdata)
    os_timer_thread_attr                     0x00002610   Data          36  rtx_lib.o(.constdata)
    os_timer_mq_attr                         0x00002634   Data          24  rtx_lib.o(.constdata)
    .constdata                               0x00002650   Section        1  irq_cm0.o(.constdata)
    .rodata                                  0x00002654   Section      160  rtx_lib.o(.rodata)
    __tagsym$$used                           0x00002654   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used                           0x000026bc   Number         0  rtx_lib.o(.rodata)
    [Anonymous Symbol]                       0x000026f4   Section        0  rtx_kernel.o(.rodata.str1.4)
    .L.str                                   0x000026f4   Data          11  rtx_kernel.o(.rodata.str1.4)
    .bss.os                                  0x1ffff000   Section     4160  rtx_lib.o(.bss.os)
    os_mem                                   0x1ffff000   Data        4096  rtx_lib.o(.bss.os)
    os_isr_queue                             0x20000000   Data          64  rtx_lib.o(.bss.os)
    .bss.os.msgqueue.cb                      0x20000040   Section       52  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_cb                           0x20000040   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.mem                     0x20000074   Section       80  rtx_lib.o(.bss.os.msgqueue.mem)
    os_timer_mq_data                         0x20000074   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    .bss.os.thread.cb                        0x200000c4   Section      136  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_cb                        0x200000c4   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x20000108   Data          68  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.stack                     0x20000150   Section      512  rtx_lib.o(.bss.os.thread.stack)
    os_idle_thread_stack                     0x20000150   Data         256  rtx_lib.o(.bss.os.thread.stack)
    os_timer_thread_stack                    0x20000250   Data         256  rtx_lib.o(.bss.os.thread.stack)
    .data                                    0x20000350   Section        1  uart_control.o(.data)
    .data                                    0x20000354   Section        4  led_control.o(.data)
    .data                                    0x20000358   Section        2  motor_control.o(.data)
    .data                                    0x2000035c   Section        4  brain.o(.data)
    .data                                    0x20000360   Section        5  rtx_lib.o(.data)
    os_kernel_active                         0x20000364   Data           1  rtx_lib.o(.data)
    .data                                    0x20000368   Section        4  system_mkl25z4.o(.data)
    .bss                                     0x20000410   Section       96  libspace.o(.bss)
    [Anonymous Symbol]                       0x20000470   Section        0  os_systick.o(.bss.PendST)
    PendST                                   0x20000470   Data           1  os_systick.o(.bss.PendST)
    HEAP                                     0x20000478   Section        0  startup_mkl25z4.o(HEAP)
    STACK                                    0x20000478   Section      256  startup_mkl25z4.o(STACK)
    Heap_Mem                                 0x20000478   Data           0  startup_mkl25z4.o(HEAP)
    Stack_Mem                                0x20000478   Data         256  startup_mkl25z4.o(STACK)
    __initial_sp                             0x20000578   Data           0  startup_mkl25z4.o(STACK)

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv3M$S$PE$A:L22$X:L11$S22$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE$ROPI$EBA8$UX$STANDARDLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    __ARM_use_no_argv                        0x00000000   Number         0  main.o ABSOLUTE
    __Vectors                                0x00000000   Data           4  startup_mkl25z4.o(RESET)
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __ARM_exceptions_init                     - Undefined Weak Reference
    __alloca_initialize                       - Undefined Weak Reference
    __arm_preinit_                            - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    __rt_locale                               - Undefined Weak Reference
    __sigvec_lookup                           - Undefined Weak Reference
    _atexit_init                              - Undefined Weak Reference
    _call_atexit_fns                          - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _fp_trap_init                             - Undefined Weak Reference
    _fp_trap_shutdown                         - Undefined Weak Reference
    _get_lc_collate                           - Undefined Weak Reference
    _get_lc_ctype                             - Undefined Weak Reference
    _get_lc_monetary                          - Undefined Weak Reference
    _get_lc_numeric                           - Undefined Weak Reference
    _get_lc_time                              - Undefined Weak Reference
    _getenv_init                              - Undefined Weak Reference
    _handle_redirection                       - Undefined Weak Reference
    _init_alloc                               - Undefined Weak Reference
    _init_user_alloc                          - Undefined Weak Reference
    _initio                                   - Undefined Weak Reference
    _rand_init                                - Undefined Weak Reference
    _signal_finish                            - Undefined Weak Reference
    _signal_init                              - Undefined Weak Reference
    _terminate_alloc                          - Undefined Weak Reference
    _terminate_user_alloc                     - Undefined Weak Reference
    _terminateio                              - Undefined Weak Reference
    __Vectors_End                            0x000000c0   Data           0  startup_mkl25z4.o(RESET)
    __Vectors_Size                           0x000000c0   Number         0  startup_mkl25z4.o ABSOLUTE
    __main                                   0x000000c1   Thumb Code     8  __main.o(!!!main)
    __scatterload                            0x000000c9   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_rt2                        0x000000c9   Thumb Code    52  __scatter.o(!!!scatter)
    __scatterload_rt2_thumb_only             0x000000c9   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_null                       0x000000d9   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_zeroinit                   0x00000105   Thumb Code    28  __scatter_zi.o(!!handler_zi)
    __rt_lib_init                            0x00000121   Thumb Code     0  libinit.o(.ARM.Collect$$libinit$$00000000)
    __rt_lib_init_alloca_1                   0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    __rt_lib_init_argv_1                     0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002C)
    __rt_lib_init_atexit_1                   0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    __rt_lib_init_clock_1                    0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    __rt_lib_init_cpp_1                      0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    __rt_lib_init_exceptions_1               0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    __rt_lib_init_fp_1                       0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000002)
    __rt_lib_init_fp_trap_1                  0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    __rt_lib_init_getenv_1                   0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    __rt_lib_init_heap_1                     0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000A)
    __rt_lib_init_lc_collate_1               0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000011)
    __rt_lib_init_lc_ctype_1                 0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    __rt_lib_init_lc_monetary_1              0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    __rt_lib_init_lc_numeric_1               0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    __rt_lib_init_lc_time_1                  0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    __rt_lib_init_preinit_1                  0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    __rt_lib_init_rand_1                     0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    __rt_lib_init_return                     0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000033)
    __rt_lib_init_signal_1                   0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    __rt_lib_init_stdio_1                    0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    __rt_lib_init_user_alloc_1               0x00000123   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    __rt_lib_shutdown                        0x00000125   Thumb Code     0  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    __rt_lib_shutdown_cpp_1                  0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    __rt_lib_shutdown_fp_trap_1              0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    __rt_lib_shutdown_heap_1                 0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    __rt_lib_shutdown_return                 0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    __rt_lib_shutdown_signal_1               0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    __rt_lib_shutdown_stdio_1                0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    __rt_lib_shutdown_user_alloc_1           0x00000127   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    __rt_entry                               0x00000129   Thumb Code     0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    __rt_entry_presh_1                       0x00000129   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    __rt_entry_sh                            0x00000129   Thumb Code     0  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    __rt_entry_postsh_1                      0x0000012f   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    __rt_entry_li                            0x00000137   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    __rt_entry_main                          0x0000013b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    __rt_entry_postli_1                      0x0000013b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    __rt_exit                                0x00000143   Thumb Code     0  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    __rt_exit_ls                             0x00000145   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    __rt_exit_prels_1                        0x00000145   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    __rt_exit_exit                           0x00000149   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    __aeabi_memcpy4                          0x00000151   Thumb Code    56  rt_memcpy.o(.emb_text)
    __aeabi_memcpy8                          0x00000151   Thumb Code     0  rt_memcpy.o(.emb_text)
    Reset_Handler                            0x00000189   Thumb Code    12  startup_mkl25z4.o(.text)
    NMI_Handler                              0x00000195   Thumb Code     2  startup_mkl25z4.o(.text)
    HardFault_Handler                        0x00000197   Thumb Code     2  startup_mkl25z4.o(.text)
    ADC0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    CMP0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DAC0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA1_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA2_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA3_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    DefaultISR                               0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    FTFA_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C1_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    LLWU_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    LPTMR0_IRQHandler                        0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    LVD_LVW_IRQHandler                       0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    MCG_IRQHandler                           0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    PIT_IRQHandler                           0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTA_IRQHandler                         0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTD_IRQHandler                         0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_IRQHandler                           0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_Seconds_IRQHandler                   0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved20_IRQHandler                    0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved39_IRQHandler                    0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved45_IRQHandler                    0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI1_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM1_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM2_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    TSI0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    UART0_IRQHandler                         0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    UART1_IRQHandler                         0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    USB0_IRQHandler                          0x0000019f   Thumb Code     0  startup_mkl25z4.o(.text)
    __user_initial_stackheap                 0x000001a5   Thumb Code     0  startup_mkl25z4.o(.text)
    SVC_Handler                              0x000001c9   Thumb Code   132  irq_cm0.o(.text)
    PendSV_Handler                           0x0000024d   Thumb Code    12  irq_cm0.o(.text)
    SysTick_Handler                          0x00000259   Thumb Code    12  irq_cm0.o(.text)
    __aeabi_memcpy                           0x0000026d   Thumb Code   130  rt_memcpy.o(.text)
    __rt_memcpy                              0x0000026d   Thumb Code     0  rt_memcpy.o(.text)
    _memset_w                                0x000002ef   Thumb Code    26  rt_memclr.o(.text)
    _memset                                  0x00000309   Thumb Code    30  rt_memclr.o(.text)
    __aeabi_memclr                           0x00000327   Thumb Code     4  rt_memclr.o(.text)
    __rt_memclr                              0x00000327   Thumb Code     0  rt_memclr.o(.text)
    __aeabi_memclr4                          0x0000032b   Thumb Code     0  rt_memclr.o(.text)
    __aeabi_memclr8                          0x0000032b   Thumb Code     0  rt_memclr.o(.text)
    __rt_memclr_w                            0x0000032b   Thumb Code     4  rt_memclr.o(.text)
    __use_two_region_memory                  0x0000032f   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_escrow$2region                 0x00000331   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_expand$2region                 0x00000333   Thumb Code     2  heapauxi.o(.text)
    __user_setup_stackheap                   0x00000335   Thumb Code    62  sys_stackheap_outer.o(.text)
    exit                                     0x00000373   Thumb Code    16  exit.o(.text)
    __user_libspace                          0x00000385   Thumb Code     8  libspace.o(.text)
    __user_perproc_libspace                  0x00000385   Thumb Code     0  libspace.o(.text)
    _sys_exit                                0x0000038d   Thumb Code     8  sys_exit.o(.text)
    __I$use$semihosting                      0x00000399   Thumb Code     0  use_no_semi.o(.text)
    __use_no_semihosting_swi                 0x00000399   Thumb Code     2  use_no_semi.o(.text)
    __decompress                             0x0000039b   Thumb Code     0  __dczerorl.o(.text)
    __decompress0                            0x0000039b   Thumb Code    58  __dczerorl.o(.text)
    __semihosting_library_function           0x0000039b   Thumb Code     0  indicate_semi.o(.text)
    OS_Tick_AcknowledgeIRQ                   0x000003f5   Thumb Code    12  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    __aeabi_uidiv                            0x00000411   Thumb Code     0  aeabi_sdiv.o(.text)
    __aeabi_uidivmod                         0x00000411   Thumb Code    20  aeabi_sdiv.o(.text)
    __aeabi_idiv                             0x00000425   Thumb Code     0  aeabi_sdiv.o(.text)
    __aeabi_idivmod                          0x00000425   Thumb Code   326  aeabi_sdiv.o(.text)
    OS_Tick_Enable                           0x00000619   Thumb Code    44  os_systick.o(.text.OS_Tick_Enable)
    OS_Tick_GetIRQn                          0x00000645   Thumb Code     6  os_systick.o(.text.OS_Tick_GetIRQn)
    OS_Tick_Setup                            0x0000064d   Thumb Code    76  os_systick.o(.text.OS_Tick_Setup)
    osKernelGetState                         0x0000077d   Thumb Code    48  rtx_kernel.o(.text.osKernelGetState)
    osKernelInitialize                       0x000007ad   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osKernelStart                            0x000007d5   Thumb Code    36  rtx_kernel.o(.text.osKernelStart)
    osMessageQueueGet                        0x000007f9   Thumb Code   116  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueueNew                        0x0000086d   Thumb Code    36  rtx_msgqueue.o(.text.osMessageQueueNew)
    osMessageQueuePut                        0x00000891   Thumb Code   120  rtx_msgqueue.o(.text.osMessageQueuePut)
    osMutexAcquire                           0x00000909   Thumb Code    40  rtx_mutex.o(.text.osMutexAcquire)
    osMutexDelete                            0x00000931   Thumb Code    40  rtx_mutex.o(.text.osMutexDelete)
    osMutexNew                               0x00000959   Thumb Code    36  rtx_mutex.o(.text.osMutexNew)
    osMutexRelease                           0x0000097d   Thumb Code    40  rtx_mutex.o(.text.osMutexRelease)
    osRtxKernelPreInit                       0x000009a5   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    osRtxMemoryAlloc                         0x000009a7   Thumb Code   124  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x00000a23   Thumb Code    78  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x00000a71   Thumb Code    50  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x00000aa3   Thumb Code    46  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x00000ad1   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x00000b0b   Thumb Code    62  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMutexOwnerRelease                   0x00000c05   Thumb Code    68  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    osRtxPendSV_Handler                      0x00000c49   Thumb Code   128  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x00000cc9   Thumb Code   108  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x00000e55   Thumb Code    56  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x00000e8d   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x00000f31   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x00000f45   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x00000f71   Thumb Code    24  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x00000f89   Thumb Code    38  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x00000fd5   Thumb Code    24  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x00000fed   Thumb Code     6  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadStackCheck                    0x00000ff5   Thumb Code    44  rtx_thread.o(.text.osRtxThreadStackCheck)
    osRtxThreadStartup                       0x00001021   Thumb Code    64  rtx_thread.o(.text.osRtxThreadStartup)
    osRtxThreadSwitch                        0x00001061   Thumb Code    20  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x00001075   Thumb Code    60  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x000010b1   Thumb Code    34  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x000010d5   Thumb Code   116  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerThread                         0x00001149   Thumb Code    60  rtx_timer.o(.text.osRtxTimerThread)
    osSemaphoreAcquire                       0x000011e5   Thumb Code    68  rtx_semaphore.o(.text.osSemaphoreAcquire)
    osSemaphoreNew                           0x00001229   Thumb Code    36  rtx_semaphore.o(.text.osSemaphoreNew)
    osSemaphoreRelease                       0x0000124d   Thumb Code    76  rtx_semaphore.o(.text.osSemaphoreRelease)
    osThreadExit                             0x00001299   Thumb Code    12  rtx_thread.o(.text.osThreadExit)
    osThreadNew                              0x000012a5   Thumb Code    36  rtx_thread.o(.text.osThreadNew)
    SystemCoreClockUpdate                    0x00001e11   Thumb Code   372  system_mkl25z4.o(i.SystemCoreClockUpdate)
    SystemInit                               0x00001fa1   Thumb Code     8  system_mkl25z4.o(i.SystemInit)
    UART2_IRQHandler                         0x00001fad   Thumb Code    32  uart_control.o(i.UART2_IRQHandler)
    __ARM_common_switch8                     0x00001fd9   Thumb Code    28  rtx_config.o(i.__ARM_common_switch8)
    _mutex_acquire                           0x0000206d   Thumb Code    24  rtx_lib.o(i._mutex_acquire)
    _mutex_free                              0x00002085   Thumb Code    12  rtx_lib.o(i._mutex_free)
    _mutex_initialize                        0x00002091   Thumb Code    36  rtx_lib.o(i._mutex_initialize)
    _mutex_release                           0x000020b5   Thumb Code    20  rtx_lib.o(i._mutex_release)
    _platform_post_stackheap_init            0x000020c9   Thumb Code     8  rtx_lib.o(i._platform_post_stackheap_init)
    brain_thread                             0x000020d1   Thumb Code    36  brain.o(i.brain_thread)
    enableMotor                              0x00002101   Thumb Code    22  motor_control.o(i.enableMotor)
    initBrain                                0x0000211d   Thumb Code    18  brain.o(i.initBrain)
    initLED                                  0x00002135   Thumb Code   146  led_control.o(i.initLED)
    initMotor                                0x000021dd   Thumb Code   352  motor_control.o(i.initMotor)
    initUART2                                0x00002355   Thumb Code   184  uart_control.o(i.initUART2)
    led_b                                    0x00002421   Thumb Code    32  led_control.o(i.led_b)
    led_control                              0x00002445   Thumb Code   102  led_control.o(i.led_control)
    led_control_thread                       0x000024ad   Thumb Code    80  led_control.o(i.led_control_thread)
    led_g                                    0x00002505   Thumb Code    36  led_control.o(i.led_g)
    led_r                                    0x0000252d   Thumb Code    36  led_control.o(i.led_r)
    main                                     0x00002555   Thumb Code    56  main.o(i.main)
    osRtxErrorNotify                         0x00002595   Thumb Code    32  rtx_config.o(i.osRtxErrorNotify)
    osRtxIdleThread                          0x000025b5   Thumb Code     4  rtx_config.o(i.osRtxIdleThread)
    setMotion                                0x000025dd   Thumb Code    16  motor_control.o(i.setMotion)
    osRtxUserSVC                             0x0000264c   Data           4  rtx_lib.o(.constdata)
    irqRtxLib                                0x00002650   Data           1  irq_cm0.o(.constdata)
    osRtxConfig                              0x00002654   Data         104  rtx_lib.o(.rodata)
    os_cb_sections                           0x000026bc   Data          56  rtx_lib.o(.rodata)
    Region$$Table$$Base                      0x00002700   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x00002720   Number         0  anon$$obj.o(Region$$Table)
    .bss.os.msgqueue.cb$$Base                0x20000040   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x20000074   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x200000c4   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x2000014c   Number         0  rtx_lib.o(.bss.os.thread.cb)
    remote_command                           0x20000350   Data           1  uart_control.o(.data)
    LED_sem                                  0x20000354   Data           4  led_control.o(.data)
    TPM0_frequency                           0x20000358   Data           1  motor_control.o(.data)
    TPM0_dutyCycle                           0x20000359   Data           1  motor_control.o(.data)
    brain_sem                                0x2000035c   Data           4  brain.o(.data)
    irqRtxLibRef                             0x20000360   Data           4  rtx_lib.o(.data)
    SystemCoreClock                          0x20000368   Data           4  system_mkl25z4.o(.data)
    osRtxInfo                                0x2000036c   Data         164  rtx_kernel.o(.data.os)
    __libspace_start                         0x20000410   Data          96  libspace.o(.bss)
    __temporary_stack_top$libspace           0x20000470   Data           0  libspace.o(.bss)



==============================================================================

Memory Map of the image

  Image Entry point : 0x00000189

  Load Region LR_1 (Base: 0x00000000, Size: 0x00003b30, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x0000275c])

    Execution Region ER_RO (Exec base: 0x00000000, Load base: 0x00000000, Size: 0x00002720, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000000   0x00000000   0x000000c0   Data   RO          387    RESET               startup_mkl25z4.o
    0x000000c0   0x000000c0   0x00000008   Code   RO          927  * !!!main             c_p.l(__main.o)
    0x000000c8   0x000000c8   0x0000003c   Code   RO         1096    !!!scatter          c_p.l(__scatter.o)
    0x00000104   0x00000104   0x0000001c   Code   RO         1098    !!handler_zi        c_p.l(__scatter_zi.o)
    0x00000120   0x00000120   0x00000002   Code   RO          963    .ARM.Collect$$libinit$$00000000  c_p.l(libinit.o)
    0x00000122   0x00000122   0x00000000   Code   RO          977    .ARM.Collect$$libinit$$00000002  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          979    .ARM.Collect$$libinit$$00000004  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          982    .ARM.Collect$$libinit$$0000000A  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          984    .ARM.Collect$$libinit$$0000000C  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          986    .ARM.Collect$$libinit$$0000000E  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          989    .ARM.Collect$$libinit$$00000011  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          991    .ARM.Collect$$libinit$$00000013  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          993    .ARM.Collect$$libinit$$00000015  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          995    .ARM.Collect$$libinit$$00000017  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          997    .ARM.Collect$$libinit$$00000019  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO          999    .ARM.Collect$$libinit$$0000001B  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1001    .ARM.Collect$$libinit$$0000001D  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1003    .ARM.Collect$$libinit$$0000001F  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1005    .ARM.Collect$$libinit$$00000021  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1007    .ARM.Collect$$libinit$$00000023  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1009    .ARM.Collect$$libinit$$00000025  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1013    .ARM.Collect$$libinit$$0000002C  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1015    .ARM.Collect$$libinit$$0000002E  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1017    .ARM.Collect$$libinit$$00000030  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000000   Code   RO         1019    .ARM.Collect$$libinit$$00000032  c_p.l(libinit2.o)
    0x00000122   0x00000122   0x00000002   Code   RO         1020    .ARM.Collect$$libinit$$00000033  c_p.l(libinit2.o)
    0x00000124   0x00000124   0x00000002   Code   RO         1051    .ARM.Collect$$libshutdown$$00000000  c_p.l(libshutdown.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1077    .ARM.Collect$$libshutdown$$00000002  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1079    .ARM.Collect$$libshutdown$$00000004  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1082    .ARM.Collect$$libshutdown$$00000007  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1085    .ARM.Collect$$libshutdown$$0000000A  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1087    .ARM.Collect$$libshutdown$$0000000C  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000000   Code   RO         1090    .ARM.Collect$$libshutdown$$0000000F  c_p.l(libshutdown2.o)
    0x00000126   0x00000126   0x00000002   Code   RO         1091    .ARM.Collect$$libshutdown$$00000010  c_p.l(libshutdown2.o)
    0x00000128   0x00000128   0x00000000   Code   RO          929    .ARM.Collect$$rtentry$$00000000  c_p.l(__rtentry.o)
    0x00000128   0x00000128   0x00000000   Code   RO          935    .ARM.Collect$$rtentry$$00000002  c_p.l(__rtentry2.o)
    0x00000128   0x00000128   0x00000006   Code   RO          947    .ARM.Collect$$rtentry$$00000004  c_p.l(__rtentry4.o)
    0x0000012e   0x0000012e   0x00000008   Code   RO          936    .ARM.Collect$$rtentry$$00000008  c_p.l(__rtentry2.o)
    0x00000136   0x00000136   0x00000004   Code   RO          938    .ARM.Collect$$rtentry$$0000000A  c_p.l(__rtentry2.o)
    0x0000013a   0x0000013a   0x00000000   Code   RO          940    .ARM.Collect$$rtentry$$0000000C  c_p.l(__rtentry2.o)
    0x0000013a   0x0000013a   0x00000008   Code   RO          941    .ARM.Collect$$rtentry$$0000000D  c_p.l(__rtentry2.o)
    0x00000142   0x00000142   0x00000002   Code   RO          968    .ARM.Collect$$rtexit$$00000000  c_p.l(rtexit.o)
    0x00000144   0x00000144   0x00000000   Code   RO         1024    .ARM.Collect$$rtexit$$00000002  c_p.l(rtexit2.o)
    0x00000144   0x00000144   0x00000004   Code   RO         1025    .ARM.Collect$$rtexit$$00000003  c_p.l(rtexit2.o)
    0x00000148   0x00000148   0x00000006   Code   RO         1026    .ARM.Collect$$rtexit$$00000004  c_p.l(rtexit2.o)
    0x0000014e   0x0000014e   0x00000002   PAD
    0x00000150   0x00000150   0x00000038   Code   RO          915    .emb_text           c_p.l(rt_memcpy.o)
    0x00000188   0x00000188   0x00000040   Code   RO          389  * .text               startup_mkl25z4.o
    0x000001c8   0x000001c8   0x000000a4   Code   RO          700    .text               RTX_CM0.lib(irq_cm0.o)
    0x0000026c   0x0000026c   0x00000082   Code   RO          916    .text               c_p.l(rt_memcpy.o)
    0x000002ee   0x000002ee   0x00000040   Code   RO          919    .text               c_p.l(rt_memclr.o)
    0x0000032e   0x0000032e   0x00000006   Code   RO          925    .text               c_p.l(heapauxi.o)
    0x00000334   0x00000334   0x0000003e   Code   RO          951    .text               c_p.l(sys_stackheap_outer.o)
    0x00000372   0x00000372   0x00000010   Code   RO          954    .text               c_p.l(exit.o)
    0x00000382   0x00000382   0x00000002   PAD
    0x00000384   0x00000384   0x00000008   Code   RO          964    .text               c_p.l(libspace.o)
    0x0000038c   0x0000038c   0x0000000c   Code   RO         1021    .text               c_p.l(sys_exit.o)
    0x00000398   0x00000398   0x00000002   Code   RO         1040    .text               c_p.l(use_no_semi.o)
    0x0000039a   0x0000039a   0x00000000   Code   RO         1042    .text               c_p.l(indicate_semi.o)
    0x0000039a   0x0000039a   0x0000003a   Code   RO         1094    .text               c_p.l(__dczerorl.o)
    0x000003d4   0x000003d4   0x0000001e   Code   RO          889    .text.MessageQueueRemove  RTX_CM0.lib(rtx_msgqueue.o)
    0x000003f2   0x000003f2   0x00000002   PAD
    0x000003f4   0x000003f4   0x0000000c   Code   RO          835    .text.OS_Tick_AcknowledgeIRQ  RTX_CM0.lib(os_systick.o)
    0x00000400   0x00000400   0x00000010   Code   RO          388    .ARM.__at_0x400     startup_mkl25z4.o
    0x00000410   0x00000410   0x0000015a   Code   RO          921    .text               c_p.l(aeabi_sdiv.o)
    0x0000056a   0x0000056a   0x0000004c   Code   RO          897    .text.MessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x000005b6   0x000005b6   0x00000062   Code   RO          891    .text.MessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000618   0x00000618   0x0000002c   Code   RO          831    .text.OS_Tick_Enable  RTX_CM0.lib(os_systick.o)
    0x00000644   0x00000644   0x00000006   Code   RO          837    .text.OS_Tick_GetIRQn  RTX_CM0.lib(os_systick.o)
    0x0000064a   0x0000064a   0x00000002   PAD
    0x0000064c   0x0000064c   0x0000004c   Code   RO          829    .text.OS_Tick_Setup  RTX_CM0.lib(os_systick.o)
    0x00000698   0x00000698   0x00000024   Code   RO          679    .text.SemaphoreTokenDecrement  RTX_CM0.lib(rtx_semaphore.o)
    0x000006bc   0x000006bc   0x00000026   Code   RO          685    .text.SemaphoreTokenIncrement  RTX_CM0.lib(rtx_semaphore.o)
    0x000006e2   0x000006e2   0x0000004e   Code   RO          573    .text.ThreadFlagsCheck  RTX_CM0.lib(rtx_thread.o)
    0x00000730   0x00000730   0x0000004c   Code   RO          721    .text.TimerInsert   RTX_CM0.lib(rtx_timer.o)
    0x0000077c   0x0000077c   0x00000030   Code   RO          436    .text.osKernelGetState  RTX_CM0.lib(rtx_kernel.o)
    0x000007ac   0x000007ac   0x00000028   Code   RO          430    .text.osKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x000007d4   0x000007d4   0x00000024   Code   RO          440    .text.osKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x000007f8   0x000007f8   0x00000074   Code   RO          863    .text.osMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x0000086c   0x0000086c   0x00000024   Code   RO          857    .text.osMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000890   0x00000890   0x00000078   Code   RO          861    .text.osMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000908   0x00000908   0x00000028   Code   RO          632    .text.osMutexAcquire  RTX_CM0.lib(rtx_mutex.o)
    0x00000930   0x00000930   0x00000028   Code   RO          638    .text.osMutexDelete  RTX_CM0.lib(rtx_mutex.o)
    0x00000958   0x00000958   0x00000024   Code   RO          628    .text.osMutexNew    RTX_CM0.lib(rtx_mutex.o)
    0x0000097c   0x0000097c   0x00000028   Code   RO          634    .text.osMutexRelease  RTX_CM0.lib(rtx_mutex.o)
    0x000009a4   0x000009a4   0x00000002   Code   RO          428    .text.osRtxKernelPreInit  RTX_CM0.lib(rtx_kernel.o)
    0x000009a6   0x000009a6   0x0000007c   Code   RO          748    .text.osRtxMemoryAlloc  RTX_CM0.lib(rtx_memory.o)
    0x00000a22   0x00000a22   0x0000004e   Code   RO          750    .text.osRtxMemoryFree  RTX_CM0.lib(rtx_memory.o)
    0x00000a70   0x00000a70   0x00000032   Code   RO          746    .text.osRtxMemoryInit  RTX_CM0.lib(rtx_memory.o)
    0x00000aa2   0x00000aa2   0x0000002e   Code   RO          763    .text.osRtxMemoryPoolAlloc  RTX_CM0.lib(rtx_mempool.o)
    0x00000ad0   0x00000ad0   0x0000003a   Code   RO          765    .text.osRtxMemoryPoolFree  RTX_CM0.lib(rtx_mempool.o)
    0x00000b0a   0x00000b0a   0x0000003e   Code   RO          761    .text.osRtxMemoryPoolInit  RTX_CM0.lib(rtx_mempool.o)
    0x00000b48   0x00000b48   0x000000bc   Code   RO          887    .text.osRtxMessageQueuePostProcess  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000c04   0x00000c04   0x00000044   Code   RO          626    .text.osRtxMutexOwnerRelease  RTX_CM0.lib(rtx_mutex.o)
    0x00000c48   0x00000c48   0x00000080   Code   RO          816    .text.osRtxPendSV_Handler  RTX_CM0.lib(rtx_system.o)
    0x00000cc8   0x00000cc8   0x0000006c   Code   RO          818    .text.osRtxPostProcess  RTX_CM0.lib(rtx_system.o)
    0x00000d34   0x00000d34   0x00000024   Code   RO          677    .text.osRtxSemaphorePostProcess  RTX_CM0.lib(rtx_semaphore.o)
    0x00000d58   0x00000d58   0x00000038   Code   RO          513    .text.osRtxThreadBlock  RTX_CM0.lib(rtx_thread.o)
    0x00000d90   0x00000d90   0x00000080   Code   RO          521    .text.osRtxThreadDelayInsert  RTX_CM0.lib(rtx_thread.o)
    0x00000e10   0x00000e10   0x00000044   Code   RO          517    .text.osRtxThreadDelayRemove  RTX_CM0.lib(rtx_thread.o)
    0x00000e54   0x00000e54   0x00000038   Code   RO          503    .text.osRtxThreadDelayTick  RTX_CM0.lib(rtx_thread.o)
    0x00000e8c   0x00000e8c   0x00000050   Code   RO          511    .text.osRtxThreadDispatch  RTX_CM0.lib(rtx_thread.o)
    0x00000edc   0x00000edc   0x00000054   Code   RO          597    .text.osRtxThreadFree  RTX_CM0.lib(rtx_thread.o)
    0x00000f30   0x00000f30   0x00000014   Code   RO          495    .text.osRtxThreadListGet  RTX_CM0.lib(rtx_thread.o)
    0x00000f44   0x00000f44   0x0000002c   Code   RO          493    .text.osRtxThreadListPut  RTX_CM0.lib(rtx_thread.o)
    0x00000f70   0x00000f70   0x00000018   Code   RO          499    .text.osRtxThreadListRemove  RTX_CM0.lib(rtx_thread.o)
    0x00000f88   0x00000f88   0x00000026   Code   RO          497    .text.osRtxThreadListSort  RTX_CM0.lib(rtx_thread.o)
    0x00000fae   0x00000fae   0x00000026   Code   RO          571    .text.osRtxThreadPostProcess  RTX_CM0.lib(rtx_thread.o)
    0x00000fd4   0x00000fd4   0x00000018   Code   RO          501    .text.osRtxThreadReadyPut  RTX_CM0.lib(rtx_thread.o)
    0x00000fec   0x00000fec   0x00000006   Code   RO          505    .text.osRtxThreadRegPtr  RTX_CM0.lib(rtx_thread.o)
    0x00000ff2   0x00000ff2   0x00000002   PAD
    0x00000ff4   0x00000ff4   0x0000002c   Code   RO          509    .text.osRtxThreadStackCheck  RTX_CM0.lib(rtx_thread.o)
    0x00001020   0x00001020   0x00000040   Code   RO          523    .text.osRtxThreadStartup  RTX_CM0.lib(rtx_thread.o)
    0x00001060   0x00001060   0x00000014   Code   RO          507    .text.osRtxThreadSwitch  RTX_CM0.lib(rtx_thread.o)
    0x00001074   0x00001074   0x0000003c   Code   RO          519    .text.osRtxThreadWaitEnter  RTX_CM0.lib(rtx_thread.o)
    0x000010b0   0x000010b0   0x00000022   Code   RO          515    .text.osRtxThreadWaitExit  RTX_CM0.lib(rtx_thread.o)
    0x000010d2   0x000010d2   0x00000002   PAD
    0x000010d4   0x000010d4   0x00000074   Code   RO          814    .text.osRtxTick_Handler  RTX_CM0.lib(rtx_system.o)
    0x00001148   0x00001148   0x0000003c   Code   RO          705    .text.osRtxTimerThread  RTX_CM0.lib(rtx_timer.o)
    0x00001184   0x00001184   0x00000060   Code   RO          707    .text.osRtxTimerTick  RTX_CM0.lib(rtx_timer.o)
    0x000011e4   0x000011e4   0x00000044   Code   RO          665    .text.osSemaphoreAcquire  RTX_CM0.lib(rtx_semaphore.o)
    0x00001228   0x00001228   0x00000024   Code   RO          661    .text.osSemaphoreNew  RTX_CM0.lib(rtx_semaphore.o)
    0x0000124c   0x0000124c   0x0000004c   Code   RO          667    .text.osSemaphoreRelease  RTX_CM0.lib(rtx_semaphore.o)
    0x00001298   0x00001298   0x0000000c   Code   RO          555    .text.osThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x000012a4   0x000012a4   0x00000024   Code   RO          527    .text.osThreadNew   RTX_CM0.lib(rtx_thread.o)
    0x000012c8   0x000012c8   0x0000000c   Code   RO          438    .text.svcRtxKernelGetState  RTX_CM0.lib(rtx_kernel.o)
    0x000012d4   0x000012d4   0x00000148   Code   RO          468    .text.svcRtxKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x0000141c   0x0000141c   0x00000084   Code   RO          470    .text.svcRtxKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x000014a0   0x000014a0   0x000000e8   Code   RO          899    .text.svcRtxMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001588   0x00001588   0x000001e4   Code   RO          885    .text.svcRtxMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x0000176c   0x0000176c   0x000000bc   Code   RO          895    .text.svcRtxMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001828   0x00001828   0x00000098   Code   RO          644    .text.svcRtxMutexAcquire  RTX_CM0.lib(rtx_mutex.o)
    0x000018c0   0x000018c0   0x000000bc   Code   RO          650    .text.svcRtxMutexDelete  RTX_CM0.lib(rtx_mutex.o)
    0x0000197c   0x0000197c   0x00000070   Code   RO          640    .text.svcRtxMutexNew  RTX_CM0.lib(rtx_mutex.o)
    0x000019ec   0x000019ec   0x000000c0   Code   RO          646    .text.svcRtxMutexRelease  RTX_CM0.lib(rtx_mutex.o)
    0x00001aac   0x00001aac   0x0000004c   Code   RO          683    .text.svcRtxSemaphoreAcquire  RTX_CM0.lib(rtx_semaphore.o)
    0x00001af8   0x00001af8   0x00000088   Code   RO          675    .text.svcRtxSemaphoreNew  RTX_CM0.lib(rtx_semaphore.o)
    0x00001b80   0x00001b80   0x00000038   Code   RO          687    .text.svcRtxSemaphoreRelease  RTX_CM0.lib(rtx_semaphore.o)
    0x00001bb8   0x00001bb8   0x0000006c   Code   RO          601    .text.svcRtxThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x00001c24   0x00001c24   0x000001ec   Code   RO          525    .text.svcRtxThreadNew  RTX_CM0.lib(rtx_thread.o)
    0x00001e10   0x00001e10   0x00000190   Code   RO          397    i.SystemCoreClockUpdate  system_mkl25z4.o
    0x00001fa0   0x00001fa0   0x0000000c   Code   RO          398    i.SystemInit        system_mkl25z4.o
    0x00001fac   0x00001fac   0x0000002c   Code   RO           71    i.UART2_IRQHandler  uart_control.o
    0x00001fd8   0x00001fd8   0x0000001c   Code   RO          376    i.__ARM_common_switch8  rtx_config.o
    0x00001ff4   0x00001ff4   0x00000078   Code   RO           72    i.__NVIC_SetPriority  uart_control.o
    0x0000206c   0x0000206c   0x00000018   Code   RO          279    i._mutex_acquire    rtx_lib.o
    0x00002084   0x00002084   0x0000000c   Code   RO          280    i._mutex_free       rtx_lib.o
    0x00002090   0x00002090   0x00000024   Code   RO          281    i._mutex_initialize  rtx_lib.o
    0x000020b4   0x000020b4   0x00000014   Code   RO          282    i._mutex_release    rtx_lib.o
    0x000020c8   0x000020c8   0x00000008   Code   RO          283    i._platform_post_stackheap_init  rtx_lib.o
    0x000020d0   0x000020d0   0x00000030   Code   RO          245    i.brain_thread      brain.o
    0x00002100   0x00002100   0x0000001c   Code   RO          205    i.enableMotor       motor_control.o
    0x0000211c   0x0000211c   0x00000018   Code   RO          246    i.initBrain         brain.o
    0x00002134   0x00002134   0x000000a8   Code   RO          112    i.initLED           led_control.o
    0x000021dc   0x000021dc   0x00000178   Code   RO          206    i.initMotor         motor_control.o
    0x00002354   0x00002354   0x000000cc   Code   RO           73    i.initUART2         uart_control.o
    0x00002420   0x00002420   0x00000024   Code   RO          113    i.led_b             led_control.o
    0x00002444   0x00002444   0x00000066   Code   RO          114    i.led_control       led_control.o
    0x000024aa   0x000024aa   0x00000002   PAD
    0x000024ac   0x000024ac   0x00000058   Code   RO          115    i.led_control_thread  led_control.o
    0x00002504   0x00002504   0x00000028   Code   RO          116    i.led_g             led_control.o
    0x0000252c   0x0000252c   0x00000028   Code   RO          117    i.led_r             led_control.o
    0x00002554   0x00002554   0x00000040   Code   RO            3    i.main              main.o
    0x00002594   0x00002594   0x00000020   Code   RO          355    i.osRtxErrorNotify  rtx_config.o
    0x000025b4   0x000025b4   0x00000004   Code   RO          356    i.osRtxIdleThread   rtx_config.o
    0x000025b8   0x000025b8   0x00000024   Code   RO          284    i.os_kernel_is_active  rtx_lib.o
    0x000025dc   0x000025dc   0x00000010   Code   RO          207    i.setMotion         motor_control.o
    0x000025ec   0x000025ec   0x00000064   Data   RO          291    .constdata          rtx_lib.o
    0x00002650   0x00002650   0x00000001   Data   RO          699    .constdata          RTX_CM0.lib(irq_cm0.o)
    0x00002651   0x00002651   0x00000003   PAD
    0x00002654   0x00002654   0x000000a0   Data   RO          293    .rodata             rtx_lib.o
    0x000026f4   0x000026f4   0x0000000b   Data   RO          482    .rodata.str1.4      RTX_CM0.lib(rtx_kernel.o)
    0x000026ff   0x000026ff   0x00000001   PAD
    0x00002700   0x00002700   0x00000020   Data   RO         1092    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Exec base: 0x1ffff000, Load base: 0x00002720, Size: 0x00001410, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x0000003c])

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x1ffff000   COMPRESSED   0x00001040   Data   RW          285    .bss.os             rtx_lib.o
    0x20000040   COMPRESSED   0x00000034   Data   RW          287    .bss.os.msgqueue.cb  rtx_lib.o
    0x20000074   COMPRESSED   0x00000050   Data   RW          288    .bss.os.msgqueue.mem  rtx_lib.o
    0x200000c4   COMPRESSED   0x00000088   Data   RW          289    .bss.os.thread.cb   rtx_lib.o
    0x2000014c   COMPRESSED   0x00000004   PAD
    0x20000150   COMPRESSED   0x00000200   Data   RW          290    .bss.os.thread.stack  rtx_lib.o
    0x20000350   COMPRESSED   0x00000001   Data   RW           74    .data               uart_control.o
    0x20000351   COMPRESSED   0x00000003   PAD
    0x20000354   COMPRESSED   0x00000004   Data   RW          118    .data               led_control.o
    0x20000358   COMPRESSED   0x00000002   Data   RW          208    .data               motor_control.o
    0x2000035a   COMPRESSED   0x00000002   PAD
    0x2000035c   COMPRESSED   0x00000004   Data   RW          247    .data               brain.o
    0x20000360   COMPRESSED   0x00000005   Data   RW          292    .data               rtx_lib.o
    0x20000365   COMPRESSED   0x00000003   PAD
    0x20000368   COMPRESSED   0x00000004   Data   RW          399    .data               system_mkl25z4.o
    0x2000036c   COMPRESSED   0x000000a4   Data   RW          483    .data.os            RTX_CM0.lib(rtx_kernel.o)


    Execution Region ER_ZI (Exec base: 0x20000410, Load base: 0x0000275c, Size: 0x00000168, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000410        -       0x00000060   Zero   RW          965    .bss                c_p.l(libspace.o)
    0x20000470        -       0x00000001   Zero   RW          847    .bss.PendST         RTX_CM0.lib(os_systick.o)
    0x20000471   0x0000275c   0x00000007   PAD
    0x20000478        -       0x00000000   Zero   RW          386    HEAP                startup_mkl25z4.o
    0x20000478        -       0x00000100   Zero   RW          385    STACK               startup_mkl25z4.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

        72         18          0          4          0       1031   brain.o
       474         42          0          4          0       3448   led_control.o
        64          8          0          0          0     220211   main.o
       420         30          0          2          0       1634   motor_control.o
        64          8          0          0          0       1057   rtx_config.o
       136          6        260       4945          0      12806   rtx_lib.o
        80         44        192          0        256        900   startup_mkl25z4.o
       412         42          0          4          0       1531   system_mkl25z4.o
       368         42          0          1          0       9940   uart_control.o

    ----------------------------------------------------------------------
      2092        240        484       4972        256     252558   Object Totals
         0          0         32          0          0          0   (incl. Generated)
         2          0          0         12          0          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       164          8          1          0          0        496   irq_cm0.o
       138         32          0          0          1       2766   os_systick.o
       598         48         11        164          0      16105   rtx_kernel.o
       252          0          0          0          0       2564   rtx_memory.o
       166          0          0          0          0      14282   rtx_mempool.o
      1568         44          0          0          0      17889   rtx_msgqueue.o
       868         32          0          0          0       9201   rtx_mutex.o
       558         28          0          0          0      10054   rtx_semaphore.o
       352         26          0          0          0       4635   rtx_system.o
      1614         96          0          0          0      30867   rtx_thread.o
       232         20          0          0          0      10018   rtx_timer.o
        58          0          0          0          0          0   __dczerorl.o
         8          0          0          0          0         68   __main.o
         0          0          0          0          0          0   __rtentry.o
        20          0          0          0          0          0   __rtentry2.o
         6          0          0          0          0          0   __rtentry4.o
        60          8          0          0          0          0   __scatter.o
        28          0          0          0          0          0   __scatter_zi.o
       346          0          0          0          0         92   aeabi_sdiv.o
        16          0          0          0          0         68   exit.o
         6          0          0          0          0        136   heapauxi.o
         0          0          0          0          0          0   indicate_semi.o
         2          0          0          0          0          0   libinit.o
         2          0          0          0          0          0   libinit2.o
         2          0          0          0          0          0   libshutdown.o
         2          0          0          0          0          0   libshutdown2.o
         8          4          0          0         96         68   libspace.o
        64          0          0          0          0        108   rt_memclr.o
       186          0          0          0          0        144   rt_memcpy.o
         2          0          0          0          0          0   rtexit.o
        10          0          0          0          0          0   rtexit2.o
        12          4          0          0          0         60   sys_exit.o
        62          0          0          0          0         80   sys_stackheap_outer.o
         2          0          0          0          0         68   use_no_semi.o

    ----------------------------------------------------------------------
      7424        350         16        164        104     119769   Library Totals
        12          0          4          0          7          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      6510        334         12        164          1     118877   RTX_CM0.lib
       902         16          0          0         96        892   c_p.l

    ----------------------------------------------------------------------
      7424        350         16        164        104     119769   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

      9516        590        500       5136        360     370795   Grand Totals
      9516        590        500         60        360     370795   ELF Image Totals (compressed)
      9516        590        500         60          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                10016 (   9.78kB)
    Total RW  Size (RW Data + ZI Data)              5496 (   5.37kB)
    Total ROM Size (Code + RO Data + RW Data)      10076 (   9.84kB)

==============================================================================

